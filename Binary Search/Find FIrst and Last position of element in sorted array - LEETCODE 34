Given an array of integers nums sorted in non-decreasing order, find the starting and ending position of a given target value.

If target is not found in the array, return [-1, -1].

You must write an algorithm with O(log n) runtime complexity.



class Solution:
    def searchRange(self, nums: List[int], target: int) -> List[int]:
        
        def BinarySearch(nums,target,isLeft):
            low,high = 0,len(nums)-1
            cur_index = -1
            while low<=high:
                mid = (low+high)//2
                if nums[mid]>target:
                    high = mid-1
                elif nums[mid]<target:
                    low = mid+1
                else:
                    cur_index = mid
                    if isLeft:
                        high = mid-1
                    else:
                        low = mid+1
            return cur_index
            
        
        
        left_index = BinarySearch(nums,target,True)
        right_index = BinarySearch(nums,target,False)
        return left_index,right_index
